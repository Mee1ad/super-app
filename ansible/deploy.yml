---
- name: Deploy Super App Backend
  hosts: all
  become: yes
  vars:
    app_user: "superapp"
    app_group: "superapp"
    docker_compose_version: "2.20.0"
    secrets_dir: "/run/secrets"
    local_secrets_dir: "./secrets"
    app_dir: "/opt/super-app"
    docker_image: "ghcr.io/{{ github_repository | default('your-username/super-app-backend') }}:latest"
    github_token: "{{ lookup('env', 'GITHUB_TOKEN') }}"

  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - curl
          - wget
          - gnupg
          - lsb-release
          - apt-transport-https
          - ca-certificates
          - software-properties-common
          - python3-pip
          - python3-setuptools
          - python3-wheel
        state: present

    - name: Create application user
      user:
        name: "{{ app_user }}"
        group: "{{ app_group }}"
        shell: /bin/bash
        create_home: yes
        system: no

    - name: Add user to sudo group
      user:
        name: "{{ app_user }}"
        groups: sudo
        append: yes

    - name: Create .ssh directory for app user
      file:
        path: "/home/{{ app_user }}/.ssh"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0700'

    - name: Copy SSH public key
      copy:
        src: "{{ lookup('env', 'SSH_KEY_PATH', default='~/.ssh/super-app-backend') }}.pub"
        dest: "/home/{{ app_user }}/.ssh/authorized_keys"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0600'
      when: ansible_file_exists("{{ lookup('env', 'SSH_KEY_PATH', default='~/.ssh/super-app-backend') }}.pub")

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Add user to docker group
      user:
        name: "{{ app_user }}"
        groups: docker
        append: yes

    - name: Enable and start Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Login to GitHub Container Registry
      docker_login:
        registry: ghcr.io
        username: "{{ lookup('env', 'GITHUB_USERNAME', default='your-username') }}"
        password: "{{ github_token }}"
      when: github_token is defined

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'

    - name: Create secrets directory
      file:
        path: "{{ secrets_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0700'

    - name: Copy secret files
      copy:
        src: "{{ local_secrets_dir }}/"
        dest: "{{ secrets_dir }}/"
        owner: root
        group: root
        mode: '0600'
      when: ansible_file_exists("{{ local_secrets_dir }}")

    - name: Copy docker-compose.yml
      copy:
        src: "../docker-compose.yml"
        dest: "{{ app_dir }}/docker-compose.yml"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'

    - name: Pull latest Docker image
      docker_image:
        name: "{{ docker_image }}"
        source: pull
        force_source: yes
      become_user: "{{ app_user }}"

    - name: Install PostgreSQL
      apt:
        name: [postgresql, postgresql-contrib, libpq-dev]
        state: present
        update_cache: yes

    - name: Ensure PostgreSQL is running
      systemd:
        name: postgresql
        state: started
        enabled: yes

    - name: Set Postgres password from secret if available
      become_user: postgres
      shell: |
        psql -c "ALTER USER postgres WITH PASSWORD '$(cat {{ secrets_dir }}/db_password 2>/dev/null || echo 'postgres')';"
      args:
        executable: /bin/bash
      when: ansible_file_exists("{{ secrets_dir }}/db_password")

    - name: Create application database
      become_user: postgres
      postgresql_db:
        name: superapp
        state: present

    - name: Create application db user
      become_user: postgres
      postgresql_user:
        name: superapp
        password: "{{ lookup('file', secrets_dir + '/db_password') | default('superapp', true) }}"
        priv: "ALL"
        state: present

    - name: Grant all privileges on database to user
      become_user: postgres
      postgresql_privs:
        db: superapp
        role: superapp
        type: database
        privs: ALL
        state: present

    - name: Stop existing containers
      docker_compose:
        project_src: "{{ app_dir }}"
        state: absent
      become_user: "{{ app_user }}"
      ignore_errors: yes

    - name: Start application with docker-compose
      docker_compose:
        project_src: "{{ app_dir }}"
        state: present
        pull: yes
      become_user: "{{ app_user }}"

    - name: Wait for application to be ready
      uri:
        url: http://localhost:8000/ping
        method: GET
        status_code: 200
      register: result
      until: result.status == 200
      retries: 30
      delay: 10
      ignore_errors: yes

    - name: Show deployment status
      debug:
        msg: "Application deployed successfully! Access at http://{{ ansible_default_ipv4.address }}:8000"

    - name: Install Nginx
      apt:
        name: nginx
        state: present
        update_cache: yes

    - name: Enable and start Nginx
      systemd:
        name: nginx
        state: started
        enabled: yes

    - name: Configure Nginx as reverse proxy
      copy:
        dest: /etc/nginx/sites-available/super-app
        content: |
          server {
              listen 80;
              server_name _;

              location / {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
      notify: Reload Nginx

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/super-app
        dest: /etc/nginx/sites-enabled/super-app
        state: link
        force: yes

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
        force: yes

    - name: Install UFW firewall
      apt:
        name: ufw
        state: present
        update_cache: yes

    - name: Allow SSH through firewall
      ufw:
        rule: allow
        name: OpenSSH

    - name: Allow HTTP through firewall
      ufw:
        rule: allow
        port: 80
        proto: tcp

    - name: Allow HTTPS through firewall
      ufw:
        rule: allow
        port: 443
        proto: tcp

    - name: Enable UFW firewall
      ufw:
        state: enabled
        policy: deny
        direction: incoming
        logging: on

  handlers:
    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded 