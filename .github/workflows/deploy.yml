name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          echo "No test command defined. Add your test runner here."

  migrate:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Setup environment variables
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          if [ -z "${{ secrets.DEBUG }}" ]; then echo "DEBUG=false" >> $GITHUB_ENV; else echo "DEBUG=${{ secrets.DEBUG }}" >> $GITHUB_ENV; fi
      - name: Run database migrations
        run: |
          python db/migrate.py

  deploy:
    runs-on: ubuntu-latest
    needs: migrate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/super-app-backend
          chmod 600 ~/.ssh/super-app-backend
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      - name: Create secrets directory
        run: mkdir -p secrets
      - name: Create secrets files
        run: |
          echo "${{ secrets.DB_PASSWORD }}" > secrets/db_password
          echo "${{ secrets.API_KEY }}" > secrets/api_key
      - name: Debug SSH setup
        run: |
          echo "SSH key exists: $(ls -la ~/.ssh/super-app-backend)"
          echo "SSH key permissions: $(stat -c '%a' ~/.ssh/super-app-backend)"
          echo "SSH key first line: $(head -1 ~/.ssh/super-app-backend)"
          echo "SSH key last line: $(tail -1 ~/.ssh/super-app-backend)"
          echo "Known hosts: $(cat ~/.ssh/known_hosts)"
      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/super-app-backend -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "echo 'SSH connection successful'"
      - name: Deploy with Ansible
        env:
          ANSIBLE_HOST_KEY_CHECKING: false
          SERVER_IP: ${{ secrets.SERVER_IP }}
          ANSIBLE_USER: ${{ secrets.SERVER_USER }}
          SSH_KEY_FILE: ~/.ssh/super-app-backend
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.CR_PAT }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: ${{ secrets.DEBUG }}
        run: |
          echo "Environment variables:"
          echo "SERVER_IP: $SERVER_IP"
          echo "ANSIBLE_USER: $ANSIBLE_USER"
          echo "SSH_KEY_FILE: $SSH_KEY_FILE"
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "DB_HOST: $DB_HOST"
          echo "DB_PORT: $DB_PORT"
          echo "DB_NAME: $DB_NAME"
          echo "DB_USER: $DB_USER"
          echo "SECRET_KEY: $SECRET_KEY"
          ansible-playbook -i ansible/inventory.yml ansible/deploy.yml 