name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
      IP_SALT: ${{ secrets.IP_SALT }}
      USER_AGENT_SALT: ${{ secrets.USER_AGENT_SALT }}
      CLIENT_URL: ${{ secrets.CLIENT_URL }}
    steps:
      - uses: actions/checkout@v3

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests with coverage
        run: |
          pytest --cov=apps --cov=db --cov=core --cov-report=xml --cov-report=term-missing tests/unit/ -v --disable-warnings --tb=short

      - name: Run CORS tests
        run: |
          pytest --cov-append --cov=apps --cov=db --cov=core --cov-report=xml --cov-report=term-missing tests/test_cors.py -v --disable-warnings --tb=short

      - name: Run integration tests with coverage
        run: |
          pytest --cov-append --cov=apps --cov=db --cov=core --cov-report=xml --cov-report=term-missing tests/integration/ -v --disable-warnings --tb=short

      - name: Run migration tests
        run: |
          pytest --cov-append --cov=apps --cov=db --cov=core --cov-report=xml --cov-report=term-missing tests/unit/test_migrations.py -v --disable-warnings --tb=short

      - name: Run migration integration tests
        run: |
          pytest --cov-append --cov=apps --cov=db --cov=core --cov-report=xml --cov-report=term-missing tests/integration/test_migration_integration.py -v --disable-warnings --tb=short

  deploy:
    runs-on: ubuntu-latest
    needs: test
    env:
      DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
      IP_SALT: ${{ secrets.IP_SALT }}
      USER_AGENT_SALT: ${{ secrets.USER_AGENT_SALT }}
      CLIENT_URL: ${{ secrets.CLIENT_URL }}
    steps:
      - uses: actions/checkout@v3

      - name: Upload project to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "./"
          target: ${{ secrets.BACKEND_DIR }}

      - name: Deploy and restart container
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd ${{ secrets.BACKEND_DIR }}
            docker compose build
            docker compose up -d --force-recreate
            
            # Wait for container to be healthy before running migrations
            echo "Waiting for container to be healthy..."
            for i in {1..30}; do
              if docker compose ps api | grep -q "healthy"; then
                echo "Container is healthy. Proceeding with migrations..."
                break
              elif [ $i -eq 30 ]; then
                echo "Container failed to become healthy within 30 attempts"
                docker compose logs api
                exit 1
              else
                echo "Container not healthy yet. Waiting... ($i/30)"
                sleep 2
              fi
            done
            
            # Run migrations with retry mechanism
            echo "Running database migrations..."
            for i in {1..5}; do
              if docker compose exec -T api python db/migrate_incremental.py migrate; then
                echo "Migrations completed successfully"
                break
              else
                echo "Migration attempt $i failed. Retrying in 5s..."
                if [ $i -eq 5 ]; then
                  echo "All migration attempts failed"
                  docker compose logs api
                  exit 1
                fi
                sleep 5
              fi
            done
            
            # Alternative: Use the migration script if the above fails
            # echo "Trying alternative migration approach..."
            # docker compose exec -T api ./scripts/run-migrations.sh
            
            # Final health check
            sleep 3
            for i in {1..5}; do
              if curl --fail http://localhost/ping; then
                echo "Health check passed."
                break
              else
                echo "Health check failed. Retrying in 1s... ($i/5)"
                sleep 1
              fi
            done
