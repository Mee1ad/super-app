name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U testuser"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Set test DB environment variables
        run: |
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DB_NAME=testdb" >> $GITHUB_ENV
          echo "DB_USER=testuser" >> $GITHUB_ENV
          echo "DB_PASSWORD=testpass" >> $GITHUB_ENV
          echo "SECRET_KEY=test" >> $GITHUB_ENV
          echo "DEBUG=false" >> $GITHUB_ENV
      - name: Test database migrations
        run: |
          echo "üß™ Testing database migrations on CI database..."
          python test-migration.py
          echo "‚úÖ Migration test completed successfully!"
      - name: Run unit tests with coverage
        run: |
          pytest --cov=apps --cov=db --cov=core --cov-report=xml --cov-report=term-missing tests/unit/ -v --disable-warnings --tb=short
      - name: Run CORS tests
        run: |
          pytest --cov-append --cov=apps --cov=db --cov=core --cov-report=xml --cov-report=term-missing tests/test_cors.py -v --disable-warnings --tb=short
      - name: Run integration tests with coverage
        run: |
          pytest --cov-append --cov=apps --cov=db --cov=core --cov-report=xml --cov-report=term-missing tests/integration/ -v --disable-warnings --tb=short
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/super-app-backend
          chmod 600 ~/.ssh/super-app-backend
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      - name: Create secrets directory
        run: mkdir -p secrets
      - name: Create secrets files
        run: |
          echo "${{ secrets.DB_PASSWORD }}" > secrets/db_password
          echo "${{ secrets.API_KEY }}" > secrets/api_key
      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/super-app-backend -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "echo 'SSH connection successful'"
      - name: Deploy with Ansible (includes production migrations)
        env:
          ANSIBLE_HOST_KEY_CHECKING: false
          SERVER_IP: ${{ secrets.SERVER_IP }}
          ANSIBLE_USER: ${{ secrets.SERVER_USER }}
          SSH_KEY_FILE: ~/.ssh/super-app-backend
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.CR_PAT }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: ${{ secrets.DEBUG }}
        run: |
          echo "üöÄ Deploying to production (Ansible will handle database migrations)..."
          ansible-playbook -i ansible/inventory.yml ansible/deploy.yml -v
      - name: Health check
        run: |
          sleep 30
          curl -f http://${{ secrets.SERVER_IP }}:8000/ping || echo "‚ö†Ô∏è  Health check failed, but deployment may still be successful" 